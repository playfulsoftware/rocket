#!/usr/bin/python

# bootstrap -- Bootstrap script for the Rocket engine.
# this script downloads and builds a copy of waf, which is then used by the rest of the build process.

import bz2
import os
import stat
import StringIO
import subprocess
import sys
import tarfile
import urllib2

DEPS_DIR = os.path.abspath("deps")
PKGS = {
        "waf": {
            "type": "tarball",
            "buildable": False,
            "url": "http://waf.googlecode.com/files/waf-%(version)s.tar.bz2",
            "version": "1.6.11"
        },
        "lua": {
            "type": "tarball",
            "make_args": ["macosx"], # need to make this cross-platform
            "nested": True,
            "url": "http://www.lua.org/ftp/lua-%(version)s.tar.gz",
            "version": "5.2.1"
        },
}

WAF_BUILD_CMD = ["python", "waf-light"]
WAF_TOOLS = ["compat15", "msvs", "xcode"]

class DependencyBuilder(object):

    def __init__(self, pkg, info):
        self.pkg = pkg
        self.info = info

        if not self.exists():
            getattr(self, "download_%s" % self.info["type"])()

        if self.info.get("buildable", True) and self.configure():
            self.build()

    def pkg_path(self):
        nested = self.info.get("nested", False)
        if not nested:
            return os.path.join(DEPS_DIR, "%s-%s" % (self.pkg, self.info["version"]))
        else:
            name_ver = "%s-%s" % (self.pkg, self.info["version"])
            if nested is True:
                return os.path.join(DEPS_DIR, name_ver, name_ver)
            else:
                return os.path.join(DEPS_DIR, name_ver, nested)

    def pkg_url(self):
        return self.info["url"] % self.info

    def download_tarball(self):
        print ("downloading tarball for %s" % self.pkg)
        urlObj = urllib2.urlopen(self.pkg_url())
        fileObj = StringIO.StringIO(urlObj.read())
        tarball = tarfile.open(None, "r", fileObj)
        tarball.extractall(os.path.join(DEPS_DIR, "%s-%s" % (self.pkg, self.info["version"])))

    def download_git(self):
        print ("cloning from git for %s" % self.pkg)
        subprocess.call(["git", "clone", self.pkg_url(), self.pkg_path()])

    def download_hg(self):
        print ("cloning from hg for %s" % self.pkg)
        subprocess.call(["hg", "clone", self.pkg_url(), self.pkg_path()])

    def exists(self):
        return os.path.exists(self.pkg_path())

    def build_dir(self):
        bd = os.path.join(self.pkg_path(), self.info.get("build_dir", "."))
        if not os.path.exists(bd):
            os.makedirs(bd)
        return bd

    def build(self):
        print ("building %s" % self.pkg)
        old_dir = os.getcwd()
        os.chdir(self.build_dir())
        success = subprocess.call(["make"] + self.info.get("make_args", []))
        os.chdir(old_dir)
        return success

    def configure(self):
        success = True
        print ("configuring %s" % self.pkg)
        if os.path.exists("%s/Makefile" % self.build_dir()):
            #print ("No configuration needed, Makefile already exists")
            return success
        else:
            print ("changing to %s" % self.build_dir())
            old_dir = os.getcwd()
            os.chdir(self.build_dir())
            config_path = os.path.join(self.pkg_path(), "configure")
            if os.path.exists(config_path):
                print ("running %s" % config_path)
                sucess = subprocess.call([os.path.join(self.pkg_path(), "configure")]) == 0
            else:
                print ("unable to build lua: no configure/makefile found")
                success = False

            os.chdir(old_dir)
        return success

def grab_tarball(dir_path, url):
    urlObj = urllib2.urlopen(url)
    fileObj = StringIO.StringIO(urlObj.read())
    tarball = tarfile.open(None, "r", fileObj)
    tarball.extractall(dir_path)

def build_waf(waf_dir):
    proj_root = os.getcwd()
    os.chdir(os.path.join(proj_root, waf_dir))
    tool_list = "--tools=%s" % (",".join(WAF_TOOLS))
    subprocess.call(WAF_BUILD_CMD + [tool_list])

    # copy the created waf file into the project root
    open(os.path.join(proj_root, "waf"), "wb").write(open("waf", "rb").read())

    # change back to the project root directory
    os.chdir(proj_root)
    os.chmod("waf", stat.S_IRWXU | stat.S_IRGRP | stat.S_IXGRP | stat.S_IROTH | stat.S_IXOTH)


def main():
    if not os.path.exists(DEPS_DIR): os.mkdir(DEPS_DIR)
    for pkg, pkg_info in PKGS.items():
        DependencyBuilder(pkg, pkg_info)
        
    # build the waf package
    if not os.path.exists("waf"):
        print "building waf binary"
        build_waf(os.path.join(DEPS_DIR, "waf-%s" % PKGS["waf"]["version"]))

    # run the 'waf configure command
    subprocess.call(["./waf", "configure"])

if __name__ == "__main__":
    main()

